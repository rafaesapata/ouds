#!/usr/bin/env python3
"""
Script de teste para verificar a corre√ß√£o do erro "'>' not supported between instances of 'int' and 'NoneType'"
"""

import sys
import os

# Adicionar o diret√≥rio do projeto ao path
sys.path.insert(0, '/home/ubuntu/projects/ouds/OpenManus')

def test_max_input_tokens_none_handling():
    """Testa se as compara√ß√µes com max_input_tokens lidam corretamente com None."""
    try:
        # Ler o arquivo para verificar se as corre√ß√µes foram aplicadas
        with open('/home/ubuntu/projects/ouds/OpenManus/app/llm.py', 'r') as f:
            content = f.read()
        
        # Verificar se todas as compara√ß√µes foram corrigidas
        problematic_comparisons = content.count('if input_tokens > self.settings.max_input_tokens:')
        if problematic_comparisons > 0:
            print(f"‚ùå ERRO: Ainda existem {problematic_comparisons} compara√ß√µes problem√°ticas")
            return False
        
        # Verificar se as corre√ß√µes foram aplicadas
        corrected_comparisons = content.count('if self.settings.max_input_tokens is not None and input_tokens > self.settings.max_input_tokens:')
        if corrected_comparisons != 3:
            print(f"‚ùå ERRO: Esperado 3 compara√ß√µes corrigidas, mas encontrado {corrected_comparisons}")
            return False
        
        print("‚úÖ TESTE PASSOU: Todas as compara√ß√µes com max_input_tokens foram corrigidas!")
        print(f"Encontradas {corrected_comparisons} compara√ß√µes corrigidas")
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO: Exce√ß√£o durante o teste: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_syntax_validation():
    """Testa se o arquivo tem sintaxe v√°lida."""
    try:
        import py_compile
        py_compile.compile('/home/ubuntu/projects/ouds/OpenManus/app/llm.py', doraise=True)
        print("‚úÖ TESTE PASSOU: Arquivo llm.py tem sintaxe v√°lida")
        return True
    except Exception as e:
        print(f"‚ùå ERRO: Arquivo llm.py tem erro de sintaxe: {e}")
        return False

def test_logic_correctness():
    """Testa se a l√≥gica das corre√ß√µes est√° correta."""
    try:
        with open('/home/ubuntu/projects/ouds/OpenManus/app/llm.py', 'r') as f:
            content = f.read()
        
        # Verificar se as linhas corretas foram modificadas
        lines = content.split('\n')
        corrected_lines = []
        
        for i, line in enumerate(lines):
            if 'if self.settings.max_input_tokens is not None and input_tokens > self.settings.max_input_tokens:' in line:
                corrected_lines.append(i + 1)  # +1 porque enumerate come√ßa em 0
        
        if len(corrected_lines) != 3:
            print(f"‚ùå ERRO: Esperado 3 linhas corrigidas, mas encontrado {len(corrected_lines)}")
            return False
        
        print(f"‚úÖ TESTE PASSOU: Corre√ß√µes aplicadas nas linhas: {corrected_lines}")
        
        # Verificar se a l√≥gica est√° correta (None check primeiro)
        for line_num in corrected_lines:
            line = lines[line_num - 1]  # -1 porque enumerate come√ßa em 0
            if not line.strip().startswith('if self.settings.max_input_tokens is not None and'):
                print(f"‚ùå ERRO: L√≥gica incorreta na linha {line_num}")
                return False
        
        print("‚úÖ TESTE PASSOU: L√≥gica das corre√ß√µes est√° correta!")
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO: Exce√ß√£o durante verifica√ß√£o da l√≥gica: {e}")
        return False

def test_methods_affected():
    """Testa se os m√©todos corretos foram afetados."""
    try:
        with open('/home/ubuntu/projects/ouds/OpenManus/app/llm.py', 'r') as f:
            content = f.read()
        
        # Verificar se as corre√ß√µes est√£o nos m√©todos corretos
        methods_with_corrections = []
        lines = content.split('\n')
        current_method = None
        
        for i, line in enumerate(lines):
            if line.strip().startswith('async def ') or line.strip().startswith('def '):
                current_method = line.strip()
            elif 'if self.settings.max_input_tokens is not None and input_tokens > self.settings.max_input_tokens:' in line:
                methods_with_corrections.append(current_method)
        
        expected_methods = ['async def ask(', 'async def ask_tool(', 'async def ask_tool_streaming(']
        
        if len(methods_with_corrections) != 3:
            print(f"‚ùå ERRO: Esperado 3 m√©todos corrigidos, mas encontrado {len(methods_with_corrections)}")
            return False
        
        print("‚úÖ TESTE PASSOU: Corre√ß√µes aplicadas nos m√©todos corretos!")
        print(f"M√©todos corrigidos: {len(methods_with_corrections)}")
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO: Exce√ß√£o durante verifica√ß√£o dos m√©todos: {e}")
        return False

def main():
    """Executa todos os testes."""
    print("üîß Testando corre√ß√£o do erro '>' not supported between instances of 'int' and 'NoneType'")
    print("=" * 80)
    
    tests = [
        ("Valida√ß√£o de sintaxe", test_syntax_validation),
        ("Verifica√ß√£o das compara√ß√µes corrigidas", test_max_input_tokens_none_handling),
        ("Verifica√ß√£o da l√≥gica das corre√ß√µes", test_logic_correctness),
        ("Verifica√ß√£o dos m√©todos afetados", test_methods_affected),
    ]
    
    all_passed = True
    
    for i, (test_name, test_func) in enumerate(tests, 1):
        print(f"\n{i}. {test_name}...")
        if not test_func():
            print(f"\n‚ùå TESTE FALHOU: {test_name}")
            all_passed = False
    
    print("\n" + "=" * 80)
    if all_passed:
        print("‚úÖ TODOS OS TESTES PASSARAM: A corre√ß√£o foi implementada com sucesso!")
        print("\nAs verifica√ß√µes de None foram adicionadas antes das compara√ß√µes com max_input_tokens.")
        print("Isso resolve o erro: '>' not supported between instances of 'int' and 'NoneType'")
    else:
        print("‚ùå ALGUNS TESTES FALHARAM: A corre√ß√£o precisa ser revisada")
    
    return all_passed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

