#!/usr/bin/env python3
"""
Script de teste simplificado para verificar a corre√ß√£o do erro 'ToolCollection' object has no attribute 'to_openai_tools'
Este teste n√£o depende de m√≥dulos externos como browser_use.
"""

import sys
import os

# Adicionar o diret√≥rio do projeto ao path
sys.path.insert(0, '/home/ubuntu/projects/ouds/OpenManus')

def test_tool_collection_method_exists():
    """Testa se o m√©todo to_openai_tools existe na classe ToolCollection."""
    try:
        # Importar apenas o que precisamos
        import inspect
        
        # Ler o arquivo diretamente para verificar se o m√©todo existe
        with open('/home/ubuntu/projects/ouds/OpenManus/app/tool/tool_collection.py', 'r') as f:
            content = f.read()
        
        # Verificar se o m√©todo to_openai_tools est√° definido
        if 'def to_openai_tools(' not in content:
            print("‚ùå ERRO: M√©todo to_openai_tools n√£o encontrado no arquivo")
            return False
        
        # Verificar se o m√©todo retorna o tipo correto
        if 'List[Dict[str, Any]]' not in content:
            print("‚ùå ERRO: M√©todo to_openai_tools n√£o tem o tipo de retorno correto")
            return False
        
        # Verificar se o m√©todo chama to_param()
        if 'tool.to_param()' not in content:
            print("‚ùå ERRO: M√©todo to_openai_tools n√£o chama tool.to_param()")
            return False
        
        print("‚úÖ TESTE PASSOU: M√©todo to_openai_tools est√° definido corretamente!")
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO: Exce√ß√£o durante o teste: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_syntax_validation():
    """Testa se o arquivo tem sintaxe v√°lida."""
    try:
        import py_compile
        py_compile.compile('/home/ubuntu/projects/ouds/OpenManus/app/tool/tool_collection.py', doraise=True)
        print("‚úÖ TESTE PASSOU: Arquivo tool_collection.py tem sintaxe v√°lida")
        return True
    except Exception as e:
        print(f"‚ùå ERRO: Arquivo tool_collection.py tem erro de sintaxe: {e}")
        return False

def test_method_signature():
    """Testa se a assinatura do m√©todo est√° correta."""
    try:
        with open('/home/ubuntu/projects/ouds/OpenManus/app/tool/tool_collection.py', 'r') as f:
            content = f.read()
        
        # Procurar pela defini√ß√£o do m√©todo
        lines = content.split('\n')
        method_line = None
        for i, line in enumerate(lines):
            if 'def to_openai_tools(' in line:
                method_line = line.strip()
                break
        
        if not method_line:
            print("‚ùå ERRO: Defini√ß√£o do m√©todo to_openai_tools n√£o encontrada")
            return False
        
        # Verificar se a assinatura est√° correta
        expected_signature = "def to_openai_tools(self) -> List[Dict[str, Any]]:"
        if expected_signature not in method_line:
            print(f"‚ùå ERRO: Assinatura incorreta. Esperado: {expected_signature}")
            print(f"Encontrado: {method_line}")
            return False
        
        print("‚úÖ TESTE PASSOU: Assinatura do m√©todo to_openai_tools est√° correta!")
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO: Exce√ß√£o durante verifica√ß√£o da assinatura: {e}")
        return False

def test_method_implementation():
    """Testa se a implementa√ß√£o do m√©todo est√° correta."""
    try:
        with open('/home/ubuntu/projects/ouds/OpenManus/app/tool/tool_collection.py', 'r') as f:
            content = f.read()
        
        # Verificar se a implementa√ß√£o est√° correta
        if 'return [tool.to_param() for tool in self.tools]' not in content:
            print("‚ùå ERRO: Implementa√ß√£o do m√©todo to_openai_tools est√° incorreta")
            return False
        
        print("‚úÖ TESTE PASSOU: Implementa√ß√£o do m√©todo to_openai_tools est√° correta!")
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO: Exce√ß√£o durante verifica√ß√£o da implementa√ß√£o: {e}")
        return False

def main():
    """Executa todos os testes."""
    print("üîß Testando corre√ß√£o do erro 'ToolCollection' object has no attribute 'to_openai_tools'")
    print("=" * 80)
    
    tests = [
        ("Valida√ß√£o de sintaxe", test_syntax_validation),
        ("Exist√™ncia do m√©todo", test_tool_collection_method_exists),
        ("Assinatura do m√©todo", test_method_signature),
        ("Implementa√ß√£o do m√©todo", test_method_implementation),
    ]
    
    all_passed = True
    
    for i, (test_name, test_func) in enumerate(tests, 1):
        print(f"\n{i}. {test_name}...")
        if not test_func():
            print(f"\n‚ùå TESTE FALHOU: {test_name}")
            all_passed = False
    
    print("\n" + "=" * 80)
    if all_passed:
        print("‚úÖ TODOS OS TESTES PASSARAM: A corre√ß√£o foi implementada com sucesso!")
        print("\nO m√©todo to_openai_tools() foi adicionado √† classe ToolCollection e deve resolver o erro:")
        print("'ToolCollection' object has no attribute 'to_openai_tools'")
    else:
        print("‚ùå ALGUNS TESTES FALHARAM: A corre√ß√£o precisa ser revisada")
    
    return all_passed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

