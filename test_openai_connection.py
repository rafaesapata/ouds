#!/usr/bin/env python3
"""
Script de teste para verificar a conectividade com a API OpenAI
"""

import sys
import os
import asyncio

# Adicionar o diret√≥rio do projeto ao path
sys.path.insert(0, '/home/ubuntu/projects/ouds/OpenManus')

async def test_openai_connection():
    """Testa a conectividade com a API OpenAI."""
    try:
        from app.config import config
        from app.llm import LLM
        
        print("üîß Testando conectividade com a API OpenAI...")
        print("=" * 60)
        
        # Verificar se a configura√ß√£o foi carregada
        print("1. Verificando configura√ß√£o...")
        llm_config = config.llm.get("default")
        if not llm_config:
            print("‚ùå ERRO: Configura√ß√£o LLM n√£o encontrada")
            return False
        
        print(f"‚úÖ Modelo: {llm_config.model}")
        print(f"‚úÖ Base URL: {llm_config.base_url}")
        print(f"‚úÖ API Type: {llm_config.api_type}")
        
        # Verificar se a chave da API est√° configurada
        if not llm_config.api_key or llm_config.api_key == "YOUR_OPENAI_API_KEY":
            print("‚ùå ERRO: Chave da API n√£o configurada")
            return False
        
        print(f"‚úÖ API Key: {llm_config.api_key[:10]}...{llm_config.api_key[-4:]}")
        
        # Inicializar o LLM
        print("\n2. Inicializando LLM...")
        llm = LLM(
            model=llm_config.model,
            settings=llm_config,
            api_key=llm_config.api_key,
            api_base=llm_config.base_url,
            api_version=llm_config.api_version
        )
        print("‚úÖ LLM inicializado com sucesso")
        
        # Testar uma requisi√ß√£o simples
        print("\n3. Testando requisi√ß√£o √† API...")
        from app.schema import Message
        
        test_messages = [
            Message.user_message("Ol√°! Este √© um teste de conectividade. Responda apenas 'OK'.")
        ]
        
        response = await llm.ask(test_messages)
        
        if response and hasattr(response, 'content'):
            print("‚úÖ TESTE PASSOU: Conectividade com a API OpenAI funcionando!")
            print(f"Resposta da API: {response.content}")
            return True
        else:
            print("‚ùå TESTE FALHOU: Resposta inv√°lida da API")
            return False
        
    except Exception as e:
        print(f"‚ùå ERRO: Exce√ß√£o durante o teste: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_config_loading():
    """Testa se a configura√ß√£o est√° sendo carregada corretamente."""
    try:
        from app.config import config
        
        print("üîß Testando carregamento da configura√ß√£o...")
        print("=" * 60)
        
        # Verificar se o arquivo config.toml existe
        config_path = config.root_path / "config" / "config.toml"
        if not config_path.exists():
            print("‚ùå ERRO: Arquivo config.toml n√£o encontrado")
            return False
        
        print("‚úÖ Arquivo config.toml encontrado")
        
        # Verificar se a configura√ß√£o LLM foi carregada
        llm_configs = config.llm
        if not llm_configs:
            print("‚ùå ERRO: Configura√ß√µes LLM n√£o carregadas")
            return False
        
        print(f"‚úÖ Configura√ß√µes LLM carregadas: {list(llm_configs.keys())}")
        
        # Verificar configura√ß√£o padr√£o
        default_config = llm_configs.get("default")
        if not default_config:
            print("‚ùå ERRO: Configura√ß√£o padr√£o n√£o encontrada")
            return False
        
        print("‚úÖ Configura√ß√£o padr√£o carregada")
        print(f"  - Modelo: {default_config.model}")
        print(f"  - Base URL: {default_config.base_url}")
        print(f"  - API Type: {default_config.api_type}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO: Exce√ß√£o durante teste de configura√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """Executa todos os testes."""
    print("üîß Testando corre√ß√£o do erro de conex√£o OpenAI")
    print("=" * 80)
    
    # Teste 1: Carregamento da configura√ß√£o
    print("\nTESTE 1: Carregamento da configura√ß√£o")
    config_ok = await test_config_loading()
    
    if not config_ok:
        print("\n‚ùå TESTE FALHOU: Problema no carregamento da configura√ß√£o")
        return False
    
    # Teste 2: Conectividade com a API
    print("\nTESTE 2: Conectividade com a API OpenAI")
    connection_ok = await test_openai_connection()
    
    print("\n" + "=" * 80)
    if config_ok and connection_ok:
        print("‚úÖ TODOS OS TESTES PASSARAM: Conectividade com OpenAI restaurada!")
        print("\nO sistema agora deve funcionar corretamente com a API OpenAI.")
    else:
        print("‚ùå ALGUNS TESTES FALHARAM: Verifique a configura√ß√£o")
    
    return config_ok and connection_ok

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)

