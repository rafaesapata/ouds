#!/bin/bash

# OUDS - Diagn√≥stico completo do proxy /api
# ==========================================

echo "üîç OUDS - Diagn√≥stico completo do proxy /api..."
echo "==============================================="

# Diret√≥rio do projeto
PROJECT_DIR="/home/ubuntu/ouds-project"
FRONTEND_DIR="$PROJECT_DIR/ouds-frontend"

echo "üìÅ Verificando diret√≥rios..."
if [ ! -d "$FRONTEND_DIR" ]; then
    echo "‚ùå Erro: Diret√≥rio frontend n√£o encontrado!"
    exit 1
fi

cd "$FRONTEND_DIR"

echo ""
echo "üîß 1. VARI√ÅVEIS DO .ENV:"
echo "========================"
echo "üìã Vari√°veis relacionadas √† API:"
grep -E "(VITE_API_URL|OUDS_API_URL|VITE_PROXY)" .env 2>/dev/null || echo "‚ùå Nenhuma vari√°vel encontrada"

echo ""
echo "üåê 2. TESTANDO BACKEND:"
echo "======================"

# Extrair URL do backend
BACKEND_URL=$(grep "VITE_API_URL" .env 2>/dev/null | cut -d'=' -f2)
if [ -z "$BACKEND_URL" ]; then
    BACKEND_URL=$(grep "OUDS_API_URL" .env 2>/dev/null | cut -d'=' -f2)
fi
if [ -z "$BACKEND_URL" ]; then
    BACKEND_URL="http://localhost:8000"
fi

echo "üéØ Backend URL configurada: $BACKEND_URL"

# Testar backend diretamente
echo "üß™ Testando backend diretamente..."
if timeout 5 curl -s -f "$BACKEND_URL/" > /dev/null 2>&1; then
    echo "‚úÖ Backend respondendo em $BACKEND_URL/"
    echo "üìÑ Resposta:"
    timeout 5 curl -s "$BACKEND_URL/" 2>/dev/null | head -3
else
    echo "‚ùå Backend N√ÉO est√° respondendo em $BACKEND_URL/"
    echo "üí° Verifique se o backend est√° rodando:"
    echo "   cd OpenManus && python3 api_server.py"
fi

echo ""
echo "üß™ Testando endpoint /health..."
if timeout 5 curl -s -f "$BACKEND_URL/health" > /dev/null 2>&1; then
    echo "‚úÖ Endpoint /health funcionando"
    timeout 5 curl -s "$BACKEND_URL/health" 2>/dev/null
else
    echo "‚ùå Endpoint /health n√£o responde"
fi

echo ""
echo "üîç 3. VERIFICANDO FRONTEND:"
echo "=========================="

# Verificar se frontend est√° rodando
if netstat -tlnp 2>/dev/null | grep -q ":5173"; then
    echo "‚úÖ Frontend rodando na porta 5173"
    
    # Testar proxy local
    echo "üß™ Testando proxy local..."
    if timeout 5 curl -s -f "http://localhost:5173/api/" > /dev/null 2>&1; then
        echo "‚úÖ Proxy /api funcionando localmente"
        echo "üìÑ Resposta do proxy:"
        timeout 5 curl -s "http://localhost:5173/api/" 2>/dev/null | head -3
    else
        echo "‚ùå Proxy /api N√ÉO funciona localmente"
        echo "üîç Testando outros endpoints do proxy..."
        
        # Testar /health via proxy
        if timeout 5 curl -s -f "http://localhost:5173/health" > /dev/null 2>&1; then
            echo "‚úÖ Proxy /health funcionando"
        else
            echo "‚ùå Proxy /health tamb√©m n√£o funciona"
        fi
    fi
else
    echo "‚ùå Frontend N√ÉO est√° rodando na porta 5173"
    echo "üí° Execute: npm run dev"
fi

echo ""
echo "üîç 4. VERIFICANDO PROCESSOS:"
echo "============================"
echo "üìã Processos Python (backend):"
ps aux | grep -E "(python|api_server)" | grep -v grep || echo "‚ùå Nenhum processo Python encontrado"

echo ""
echo "üìã Processos Node.js (frontend):"
ps aux | grep -E "(node|npm|vite)" | grep -v grep || echo "‚ùå Nenhum processo Node.js encontrado"

echo ""
echo "üîç 5. VERIFICANDO PORTAS:"
echo "========================"
echo "üìã Porta 8000 (backend):"
netstat -tlnp 2>/dev/null | grep ":8000" || echo "‚ùå Porta 8000 n√£o est√° em uso"

echo ""
echo "üìã Porta 5173 (frontend):"
netstat -tlnp 2>/dev/null | grep ":5173" || echo "‚ùå Porta 5173 n√£o est√° em uso"

echo ""
echo "üîç 6. TESTANDO CONECTIVIDADE EXTERNA:"
echo "====================================="
echo "üß™ Testando acesso externo ao frontend..."
if timeout 10 curl -s -f "http://52.71.245.167:5173/" > /dev/null 2>&1; then
    echo "‚úÖ Frontend acess√≠vel externamente"
    
    echo "üß™ Testando proxy externo /api/..."
    if timeout 10 curl -s -f "http://52.71.245.167:5173/api/" > /dev/null 2>&1; then
        echo "‚úÖ Proxy /api funcionando externamente"
    else
        echo "‚ùå Proxy /api N√ÉO funciona externamente"
    fi
    
    echo "üß™ Testando proxy externo /health..."
    if timeout 10 curl -s -f "http://52.71.245.167:5173/health" > /dev/null 2>&1; then
        echo "‚úÖ Proxy /health funcionando externamente"
    else
        echo "‚ùå Proxy /health N√ÉO funciona externamente"
    fi
else
    echo "‚ùå Frontend N√ÉO acess√≠vel externamente"
fi

echo ""
echo "üìã 7. RESUMO E SOLU√á√ïES:"
echo "========================"
echo "üîß Para resolver problemas do proxy /api:"
echo ""
echo "1Ô∏è‚É£ Se backend n√£o estiver rodando:"
echo "   cd OpenManus && python3 api_server.py &"
echo ""
echo "2Ô∏è‚É£ Se frontend n√£o estiver rodando:"
echo "   cd ouds-frontend && npm run dev"
echo ""
echo "3Ô∏è‚É£ Se proxy n√£o funcionar:"
echo "   - Verifique logs no console do browser (F12)"
echo "   - Reinicie frontend: Ctrl+C e npm run dev"
echo "   - Verifique vari√°vel VITE_API_URL no .env"
echo ""
echo "4Ô∏è‚É£ Para debug avan√ßado:"
echo "   - Logs do frontend: npm run dev (veja console)"
echo "   - Logs do backend: python3 api_server.py (veja terminal)"
echo "   - Teste manual: curl http://localhost:5173/api/"

echo ""
echo "üéØ URLs para testar:"
echo "==================="
echo "Backend direto: $BACKEND_URL/"
echo "Proxy local: http://localhost:5173/api/"
echo "Proxy externo: http://52.71.245.167:5173/api/"
echo "Frontend: http://o.udstec.io/"

